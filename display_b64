#! ./yasl_linux

{
    "========= 0 ========\n" print
    #
    #(print "\n" print)
    "====================\n" print
    1 exit
} print_stack_0
{
    "========= 1 ========\n" print
    1:#
    #(1:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_1
{
    "========= 2 ========\n" print
    2:#
    #(2:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_2
{
    "========= 3 ========\n" print
    3:#
    #(3:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_3
{
    "========= 4 ========\n" print
    4:#
    #(4:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_4
{
    "========= 5 ========\n" print
    5:#
    #(5:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_5
{
    "========= 6 ========\n" print
    6:#
    #(6:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_6
{
    "========= 7 ========\n" print
    7:#
    #(7:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_7
{
    "========= 8 ========\n" print
    8:#
    #(8:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_8
{
    "========= 9 ========\n" print
    9:#
    #(9:print "\n" print)
    "====================\n" print
    1 exit
} print_stack_9


!!
("000000" "000001" "000010" "000011" "000100" "000101" "000110" "000111" "001000" "001001" "001010" "001011" "001100" "001101" "001110" "001111" "010000" "010001" "010010" "010011" "010100" "010101" "010110" "010111" "011000" "011001" "011010" "011011" "011100" "011101" "011110" "011111" "100000" "100001" "100010" "100011" "100100" "100101" "100110" "100111" "101000" "101001" "101010" "101011" "101100" "101101" "101110" "101111" "110000" "110001" "110010" "110011" "110100" "110101" "110110" "110111" "111000" "111001" "111010" "111011" "111100" "111101" "111110" "111111"):2
2:(# []):2 //make list


{
    ][          // unlist the string with the size
    = 0 != ? (    // if size not 0
        = 1 + !^    // duplicate size after each letter
        # 2 - #!    // drop created list of letter
    )
} strlen        // must have the same stack in input and output

{
    "/" - 47 + 
} char_to_ascii

{
    = 43 == ? (62:9)    // +
    = 47 == ? (63:9)    // '/'
    = = 48 >= 2 ^ 57 <= && ? (= 4 +:9)  // '0' -> '9'
    = = 65 >= 2 ^ 90 <= && ? (= 65 -:9) // 'A' -> 'Z'
    = = 97 >= 2 ^ 122 <= && ? (= 71 -:9)  // 'a' -> 'z'
    9:# 0 == ? ("Error: cannot convert char to base64.\n" print 1 exit)
    ! 9:= 9:!
} ascii_to_b64

{ 
    =:2 !
    2:(%]#[) 2:!
} b64_to_binary         // get the binary value of the int

{
    =:3     //what we look for
    1:4     //count

    1 @(
        3:=:3 4:=:4 4:=:4 4:*:3 3:<=:3 3:? (4:=:5) : (1:4 4:+:4)
        5:# 0 ==
        4:= 1000 <=
        &&
    )
    3:! 4:!
    5:# ? (5:= 5:!) : 0
} sqrt

//0 2 ^

""
read
@ (
    +
    read
)
+

][ 4 / = // drop size but needed for parsing
"Image received, nb pixels : " print "\n" + print
sqrt =:8
"Found square : " print "\n" + print
#(
    # ^ # ^ # ^ # ^   // get the 4 last on top
    +++:1
    "":3
    1:(
        ][ #(
            char_to_ascii  ascii_to_b64  b64_to_binary  =:3
            3:(2 ^ +):3 
            ! 
        )
    ):1
)
3:# #(3:= 3:!)

{
    ][ !
    8 #(eval:5 5:(# 1 - <<):5) 5:(+++++++):5 // B -> stack5
    8 #(eval:6 6:(# 1 - <<):6) 6:(+++++++):6 // G -> stack6
    8 #(eval:7 7:(# 1 - <<):7) 7:(+++++++):7 // R -> stack7
} word_to_rgb

0:9 //count
# #(
    word_to_rgb 
    "\e[48;2;"
    print
    7:= 7:! // R
    print
    ";"
    print
    6:= 6:! // G
    print
    ";"
    print
    5:= 5:! // B
    print
    "m  \e[0m"
    print
    // print_stack_0
    1:9 9:+:9 //increment count
    9:= 8:= % 0 == ? ("\n" print)
)

// "\e[48;2;255;0;0m  \e[0m" print

